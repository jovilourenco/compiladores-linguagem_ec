// TESTE FUN 1 — Fatorial (recursão direta)
fun fact(n) {
  var r = 0;
  if (n < 2) {
    r = 1;
  } else {
    r = n * fact(n - 1);
  }
  return r;
}

main {
  return fact(6);
}
*** Esperado: imprime 720 (6! = 720). Teste de recursão direta; gera chamadas com push args, call/ret, rótulos Lret_*. ***

// TESTE FUN 2 — Fibonacci (recursão direta, exponencial)
fun fib(n) {
  var r = 0;
  if (n < 2) {
    r = 1;
  } else {
    r = fib(n - 1) + fib(n - 2);
  }
  return r;
}

main {
  return fib(7);
}
*** Esperado: imprime 21. Verifica chamadas recursivas com 2 argumentos nas chamadas internas e soma de retornos. ***

// TESTE FUN 3 — Função sem parâmetros
fun cinco() {
  return 5;
}

main {
  return cinco();
}
*** Esperado: imprime 5. Teste de função sem parâmetros; chamada com parênteses vazios. ***

// TESTE FUN 4 — Encadeamento de funções (ordem correta)
fun inc(n) {
  var r = 0;
  r = n + 1;
  return r;
}

fun double(n) {
  var r = 0;
  r = n * 2;
  return r;
}

main {
  var tmp = 0;
  tmp = inc(3);
  tmp = double(tmp);
  return tmp;
}
*** Esperado: imprime 8. Chama duas funções definidas antes do uso no main; checa passagem de valores e armazenamento. ***

// TESTE FUN 5 — Chamada com aridade errada (mais argumentos)
fun soma2(a,b) {
  return a + b;
}

main {
  return soma2(1,2,3);
}
*** Esperado: ERRO SEMÂNTICO — chamada para 'soma2' com aridade 3, esperada 2. ***

// TESTE FUN 6 — Chamada com aridade errada (menos argumentos)
fun soma2(a,b) {
  return a + b;
}

main {
  return soma2(1);
}
*** Esperado: ERRO SEMÂNTICO — chamada para 'soma2' com aridade 1, esperada 2. ***

// TESTE FUN 7 — Chamar função não declarada
main {
  return naoExiste(1);
}
*** Esperado: ERRO SEMÂNTICO — chamada para função não declarada 'naoExiste'. ***

// TESTE FUN 8 — Função que tenta usar global não-declarada (atribuição)
fun f() {
  var x = 1;
  y = x + 1;
  return y;
}

main {
  return 0;
}
*** Esperado: ERRO SEMÂNTICO — atribuição para 'y' não declarada dentro da função (LHS deve existir no escopo). ***

// TESTE FUN 9 — Parâmetro com mesmo nome de variável global (conflito)
x = 10;

fun g(x) {
  return x + 1;
}

main {
  return g(2);
}
*** Esperado: imprime 3. Parâmetro sombra o global (se seu semântico permitir sombra); se seu semântico proibir, ERRO SEMÂNTICO de conflito (ver regra do projeto). ***

// TESTE FUN 10 — Variável local redeclarada como parâmetro (erro)
fun h(a) {
  var a = 2;
  return a;
}

main {
  return h(1);
}
*** Esperado: ERRO SEMÂNTICO — variável local 'a' redeclarada como parâmetro na função 'h'. ***

// TESTE FUN 11 — Declaração de função dentro de função (sintaxe inválida)
fun outer() {
  fun inner() {
    return 1;
  }
  return 0;
}

main {
  return outer();
}
*** Esperado: SYNTAX_ERROR — declaração 'fun' não permitida dentro de outra função (parser não aceita). ***

// TESTE FUN 12 — Mutual recursion (par order) - deve falhar se proibimos recursão mútua
fun is_even(n) {
  if (n == 0) { return 1; } else { return is_odd(n - 1); }
}

fun is_odd(n) {
  if (n == 0) { return 0; } else { return is_even(n - 1); }
}

main {
  return is_even(4);
}
*** Esperado: DEPENDE da checagem: se o semântico NÃO permite chamadas para funções definidas depois (evita mutual recursion), ERRO SEMÂNTICO 'chamada para função não disponível ainda' (is_odd chamada por is_even antes de registro parcial). Se seu semântico permitir (assinaturas registradas antes), espera 1. ***

// TESTE FUN 13 — Forward call (fun definida depois) — deve ser ERRO se você exige ordem
fun first(n) {
  return second(n - 1);
}

fun second(n) {
  if (n < 0) { return 0; }
  return n;
}

main {
  return first(3);
}
*** Esperado: se semântico exige que funções chamem apenas funções já "parciais" (definidas antes), ERRO SEMÂNTICO 'chamada para função não disponível ainda'. Se não, resultado depende de implementação. ***

// TESTE FUN 14 — Retorno em meio ao corpo (multiple returns)
fun early(n) {
  if (n < 0) { return 100; }
  return n;
}

main {
  return early(-1);
}
*** Esperado: imprime 100. Verifica que return dentro do if dispara retorno correto. ***

// TESTE FUN 15 — Uso indevido de 'var' no main (sintaxe proibida)
fun foo() {
  return 1;
}

main {
  var x = 1;
  return 0;
}
*** Esperado: SYNTAX_ERROR ou ERRO SEMÂNTICO — declaração 'var' não permitida dentro de main (regra do projeto). ***
